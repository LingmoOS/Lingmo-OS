#!/bin/sh

set -e

VERSION='@VERSION@'

unset TMP TEMP TMPDIR || true

# might not be exported if we're running from init=/bin/sh or similar
export PATH

if [ -z "$SYSBOOTSTRAP_DIR" ]; then
	if [ -x /sysbootstrap/sysbootstrap ]; then
		SYSBOOTSTRAP_DIR=/sysbootstrap
	else
		# SYSBOOTSTRAP_DIR=/usr/share/sysbootstrap
		SYSBOOTSTRAP_DIR=.
	fi
fi

. "$SYSBOOTSTRAP_DIR/functions"
exec 4>&1

LANG=C
EXTRA_SUITES=""
USE_COMPONENTS=main
KEYRING=""
DISABLE_KEYRING=""
FORCE_KEYRING=""
VARIANT=""
MERGED_USR=""
ARCH=""
HOST_ARCH=""
HOST_OS=""
KEEP_SYSBOOTSTRAP_DIR=""
USE_DEBIANINSTALLER_INTERACTION=""
SECOND_STAGE_ONLY=""
CHROOTDIR=""
MAKE_TARBALL=""
EXTRACTOR_OVERRIDE=""
UNPACK_TARBALL=""
ADDITIONAL=""
EXCLUDE=""
EXCLUDE_DEPENDENCY=""
VERBOSE=""
CERTIFICATE=""
CHECKCERTIF=""
PRIVATEKEY=""
CACHE_DIR=""
INRELEASE_PATH=""

DEF_MIRROR="https://packages.lingmo.org"

# set $CONTAINER
detect_container

export LANG USE_COMPONENTS
umask 022

###########################################################################

## phases:
##   finddebs dldebs printdebs save_variables first_stage second_stage

RESOLVE_DEPS=true

WHAT_TO_DO="finddebs dldebs save_variables first_stage second_stage"
am_doing_phase () {
	# usage:   if am_doing_phase finddebs; then ...; fi
	local x;
	for x in "$@"; do
		if echo " $WHAT_TO_DO " | grep -q " $x "; then return 0; fi
	done
	return 1
}

###########################################################################

usage_err()
{
#	info USAGE1 "usage: [OPTION]... <suite> <target> [<mirror> [<script>]]"
# 	info USAGE2 "Try \`${0##*/} --help' for more information."
 	error "$@"
}

# usage()
# {
# 	echo "Usage: ${0##*/} [OPTION]... <suite> <target> [<mirror> [<script>]]"
# 	echo "Bootstrap a Debian base system into a target directory."
# 	echo
# 	cat <<EOF
#       --help                 display this help and exit
#       --version              display version information and exit
#       --verbose              don't turn off the output of wget

#       --download-only        download packages, but don't perform installation
#       --print-debs           print the packages to be installed, and exit

#       --arch=A               set the architecture to install (use if no dpkg)
#                                [ --arch=powerpc ]

#       --include=A,B,C        adds specified names to the list of base packages
#       --exclude=A,B,C        removes specified packages from the list
#       --extra-suites=A,B,C   also use packages from the listed suites of the
#                              archive
#       --components=A,B,C     use packages from the listed components of the
#                              archive
#       --variant=X            use variant X of the bootstrap scripts
#                              (currently supported variants: buildd, fakechroot,
#                               minbase)
#       --merged-usr           make /{bin,sbin,lib}/ symlinks to /usr/
#                              (default for newer Debian suites)
#       --no-merged-usr        do not make /{bin,sbin,lib}/ symlinks to /usr/
#                              (default for older Debian suites)
#       --keyring=K            check Release files against keyring K
#       --no-check-gpg         avoid checking Release file signatures
#       --force-check-gpg      force checking Release file signatures
#                              (also disables automatic fallback to HTTPS in case
#                              of a missing keyring), aborting otherwise
#       --no-resolve-deps      don't try to resolve dependencies automatically
#       --log-extra-deps       record extra dependency info in sysbootstrap.log
#       --cache-dir=DIR        Use specified directory as package cache directory

#       --unpack-tarball=T     acquire .debs from a tarball instead of http
#       --make-tarball=T       download .debs and create a gzipped tarball
#       --second-stage-target=DIR
#                              Run second stage in a subdirectory instead of root
#                                (can be used to create a foreign chroot)
#                                (requires --second-stage)
#       --extractor=TYPE       override automatic .deb extractor selection
#                                (supported: $EXTRACTORS_SUPPORTED)
#       --debian-installer     used for internal purposes by debian-installer
#       --private-key=file     read the private key from file
#       --certificate=file     use the client certificate stored in file (PEM)
#       --no-check-certificate do not check certificate against certificate authorities

#       --inrelease-path       determine the path to the InRelease file of the main
#                              archive relative to the normal position of an InRelease
#                              file
# EOF
# }

###########################################################################

if [ -z "$PKGDETAILS" ]; then
	error 1 NO_PKGDETAILS "No pkgdetails available; either install perl, or build pkgdetails.c from the base-installer source package"
fi

###########################################################################

if [ $# != 0 ] ; then
    while true ; do
	case "$1" in
	    --print-debs)
		check_conflicting_option "$1"
		WHAT_TO_DO="finddebs printdebs kill_target"
		shift
		;;
	    --download-only)
		check_conflicting_option "$1"
		WHAT_TO_DO="finddebs dldebs"
		shift
		;;
        --arch|--arch=?*)
		if [ "$1" = "--arch" ] && [ -n "$2" ] ; then
			ARCH="$2"
			shift 2
                elif [ "$1" != "${1#--arch=}" ]; then
			ARCH="${1#--arch=}"
			shift
		else
			error 1 NEEDARG "option requires an argument %s" "$1"
		fi
		;;

	    --extractor|--extractor=?*)
		if [ "$1" = "--extractor" ] && [ -n "$2" ] ; then
			EXTRACTOR_OVERRIDE="$2"
			shift 2
		elif [ "$1" != "${1#--extractor=}" ]; then
			EXTRACTOR_OVERRIDE="${1#--extractor=}"
			shift
		else
			error 1 NEEDARG "option requires an argument %s" "$1"
		fi
		if valid_extractor "$EXTRACTOR_OVERRIDE"; then
			if ! in_path "$EXTRACTOR_OVERRIDE"; then
				error 1 MISSINGEXTRACTOR "The selected extractor cannot be found: %s" "$EXTRACTOR_OVERRIDE"
			fi
		else
			error 1 BADEXTRACTOR "%s: unknown extractor" "$EXTRACTOR_OVERRIDE"
		fi
		;;
	    --cache-dir|--cache-dir=?*)
		# Okay, let's check user's option
		if [ "$1" = "--cache-dir" ] && [ -n "$2" ] ; then
			CACHE_DIR="$2"
			shift 2
		elif [ "$1" != "${1#--cache-dir=}" ]; then
			CACHE_DIR="${1#--cache-dir=}"
			shift
		else
			error 1 NEEDARG "option requires an argument %s" "$1"
		fi
		if [ ! -z "${CACHE_DIR##/*}" ]; then
			error 1 NOTABSOLUTEPATH "cache directory should be specified with an absolute path"
		fi
		if [ ! -d "$CACHE_DIR" ] ; then
			error 1 NOCACHEDIR "%s: No such directory" "$CACHE_DIR"
		fi
		;;
        --merged-usr)
		MERGED_USR=yes
		shift
		;;
	    -*)
		error 1 BADARG "unrecognized or invalid option %s" "$1"
		;;
	    *)
		break
		;;
	esac
    done
fi

###########################################################################
# do auto proxy discovery
AUTOPROXY=""
if ! doing_variant fakechroot && command -v apt-config >/dev/null; then
    eval "$(apt-config shell AUTOPROXY Acquire::http::Proxy-Auto-Detect)"
    if [ -z "$AUTOPROXY" ]; then
        eval "$(apt-config shell AUTOPROXY Acquire::http::ProxyAutoDetect)"
    fi
    if [ -z "${http_proxy+x}" ] && [ -x "$AUTOPROXY" ]; then
        http_proxy="$($AUTOPROXY)"
        if [ -n "$http_proxy" ] && [ "$http_proxy" != "DIRECT" ]; then
            info AUTOPROXY "Using auto-detected proxy: $http_proxy"
            export http_proxy
        fi
    fi
fi

###########################################################################
if [ -n "$DISABLE_KEYRING" ] && [ -n "$FORCE_KEYRING" ]; then
	error 1 BADARG "Both --no-check-gpg and --force-check-gpg specified, please pick one (at most)"
fi

###########################################################################

if [ "$SECOND_STAGE_ONLY" = "true" ]; then
	SUITE=$(cat "$SYSBOOTSTRAP_DIR/suite")
	if [ -e "$SYSBOOTSTRAP_DIR/extra-suites" ]; then
		EXTRA_SUITES=$(cat "$SYSBOOTSTRAP_DIR/extra-suites")
	fi
	ARCH=$(cat "$SYSBOOTSTRAP_DIR/arch")
	USER_MIRROR=$(cat "$SYSBOOTSTRAP_DIR/mirror")
	if [ -e "$SYSBOOTSTRAP_DIR/variant" ]; then
		VARIANT=$(cat "$SYSBOOTSTRAP_DIR/variant")
		SUPPORTED_VARIANTS="$VARIANT"
	fi
	if [ -z "$CHROOTDIR" ]; then
		TARGET=/
	else
		TARGET=$CHROOTDIR
	fi
	SCRIPT="$SYSBOOTSTRAP_DIR/suite-script"
else
	if ! in_path wget; then
		error 1 NEEDWGET "You must install wget to download packages."
	fi
	if [ -z "$1" ] || [ -z "$2" ]; then
		usage_err 1 NEEDSUITETARGET "You must specify a suite and a target."
	fi
	SUITE="$1"
	TARGET="$2"
	USER_MIRROR="$3"
	TARGET="${TARGET%/}"
	if [ "${TARGET#/}" = "${TARGET}" ]; then
		if [ "${TARGET%/*}" = "$TARGET" ] ; then
			TARGET="$(pwd)/$TARGET"
		else
			TARGET="$(cd "${TARGET%/*}"; echo "$(pwd)/${TARGET##*/}")"
		fi
	fi

	SCRIPT="$SYSBOOTSTRAP_DIR/scripts/$1"
	if ! [ -e "$SCRIPT" ] && [ $(which distro-info 2>/dev/null) ]; then
		if debian-distro-info --series "$1" >/dev/null 2>&1; then
			SCRIPT="$SYSBOOTSTRAP_DIR/scripts/sid"
		elif ubuntu-distro-info --series "$1" >/dev/null 2>&1; then
			SCRIPT="$SYSBOOTSTRAP_DIR/scripts/gutsy"
		fi
	fi
	if [ -n "$VARIANT" ] && [ -e "${SCRIPT}.${VARIANT}" ]; then
		SCRIPT="${SCRIPT}.${VARIANT}"
		SUPPORTED_VARIANTS="$VARIANT"
	fi
	if [ "$4" != "" ]; then
		if [ -e "$SYSBOOTSTRAP_DIR/scripts/$4" ]; then
			SCRIPT="$SYSBOOTSTRAP_DIR/scripts/$4"
		else
			SCRIPT="$4"
		fi
	fi
fi

###########################################################################

if am_doing_phase kill_target; then
	# Require empty target when we are going to remove it afterwards
	if [ -d "$TARGET" ] && [ -n "$(ls -A "$TARGET")" ] && \
	   [ "$KEEP_SYSBOOTSTRAP_DIR" != "true" ]; then
		error 1 BADTARGET "Target directory '$TARGET' is not empty and it would be wiped"
	fi
fi

###########################################################################

if in_path dpkg && \
     dpkg --print-architecture >/dev/null 2>&1; then
	HOST_ARCH=$(/usr/bin/dpkg --print-architecture)
elif in_path udpkg && \
     udpkg --print-architecture >/dev/null 2>&1; then
	HOST_ARCH=$(/usr/bin/udpkg --print-architecture)
elif [ -e "$SYSBOOTSTRAP_DIR/arch" ]; then
	HOST_ARCH=$(cat "$SYSBOOTSTRAP_DIR/arch")
fi
HOST_OS="$HOST_ARCH"
# basic host OS guessing for non-Debian systems
if [ -z "$HOST_OS" ]; then
	case $(uname) in
		Linux)
			HOST_OS=linux
		;;
		GNU/kFreeBSD)
			HOST_OS=kfreebsd
		;;
		GNU)
			HOST_OS=hurd
		;;
		FreeBSD*)
			HOST_OS=freebsd
		;;
	esac
fi

if [ -z "$ARCH" ]; then
	ARCH="$HOST_ARCH"
fi

if [ -z "$ARCH" ] || [ -z "$HOST_OS" ]; then
        error 1 WHATARCH "Couldn't work out current architecture"

fi

if [ "$HOST_OS" = "kfreebsd" ] || [ "$HOST_OS" = "freebsd" ]; then
	for module in linprocfs fdescfs tmpfs linsysfs; do
		kldstat -m "$module" > /dev/null 2>&1 || warning SANITYCHECK "Probably required module %s is not loaded" "$module"
	done
fi

if [ "$TARGET" = "/" ]; then
	CHROOT_CMD=""
else
	CHROOT_CMD="chroot \"$TARGET\""
fi

# fakeroot cannot check /proc/1/environ
if [ "$HOST_OS" = Linux ] && ! doing_variant fakechroot && [ "$CONTAINER" = "lxc-libvirt" ]; then
       CHROOT_CMD="unshare --net $CHROOT_CMD"
fi

if [ -z "$SHA_SIZE" ]; then
	SHA_SIZE=256
fi
if ! in_path "sha${SHA_SIZE}sum" && ! in_path "sha${SHA_SIZE}"; then
	warning SHA_SIZE "Cannot find binary for checking sha%s checksums, falling back to sha1" "${SHA_SIZE}"
	SHA_SIZE=1
fi
SYSBOOTSTRAP_CHECKSUM_FIELD="SHA$SHA_SIZE"

export ARCH SUITE EXTRA_SUITES TARGET CHROOT_CMD SHA_SIZE SYSBOOTSTRAP_CHECKSUM_FIELD

if am_doing_phase first_stage second_stage; then
	if in_path id && [ "$(id -u)" -ne 0 ]; then
		error 1 NEEDROOT "sysbootstrap can only run as root"
	fi
	if ! in_path chroot; then
		error 1 NEEDCHROOT "Cannot find chroot executable in \$PATH"
	fi
	# Ensure that we can create working devices and executables on the target.
	if ! check_sane_mount "$TARGET"; then
		error 1 NOEXEC "Cannot install into target '$TARGET' mounted with noexec"
	fi
fi

if [ ! -e "$SCRIPT" ]; then
	error 1 NOSCRIPT "No such script: %s" "$SCRIPT"
fi

###########################################################################

if [ "$TARGET" != "" ]; then
	mkdir -p "$TARGET/sysbootstrap"
fi

###########################################################################

# Use of fd's by functions/scripts:
#
#    stdin/stdout/stderr: used normally
#    fd 4: I:/W:/etc information
#    fd 5,6: spare for functions
#    fd 7,8: spare for scripts

if [ "$USE_DEBIANINSTALLER_INTERACTION" = yes ]; then
	#    stdout=stderr: full log of sysbootstrap run
	#    fd 3: I:/W:/etc information
	exec 4>&3
elif am_doing_phase printdebs; then
	#    stderr: I:/W:/etc information
	#    stdout: debs needed
	exec 4>&2
else
	#    stderr: used in exceptional circumstances only
	#    stdout: I:/W:/etc information
	#    $TARGET/sysbootstrap/sysbootstrap.log: full log of sysbootstrap run
	exec 4>&1
	exec >>"$TARGET/sysbootstrap/sysbootstrap.log"
	exec 2>&1
fi

###########################################################################

if [ -x /usr/bin/arch-test ] && am_doing_phase second_stage; then
	if doing_variant fakechroot; then
		ret=0; arch-test "$ARCH" || ret=$?
	# Avoid failure with old arch-test package
	elif arch-test --version > /dev/null 2>&1; then
		ret=0; arch-test -c "$TARGET" "$ARCH" || ret=$?
	else
		ret=3
	fi

	case $ret in
	0)      info ARCHEXEC "Target architecture can be executed" ;;
	1)      error 1 ARCHNOTEXEC "Unable to execute target architecture" ;;
	*)      info ARCHEXECUNKNOWN "Can't verify that target arch works" ;;
	esac
fi

. "$SCRIPT"

MIRRORS="$DEF_MIRROR"
if [ "$USER_MIRROR" != "" ]; then
	MIRRORS="${USER_MIRROR%/}"
fi

export MIRRORS

ok=false
for v in $SUPPORTED_VARIANTS; do
	if doing_variant "$v"; then ok=true; fi
done
if ! "$ok"; then
	error 1 UNSUPPVARIANT "unsupported variant"
fi

###########################################################################

if am_doing_phase finddebs; then
	if [ "$FINDDEBS_NEEDS_INDICES" = "true" ] || \
	   [ "$RESOLVE_DEPS" = "true" ]; then
		download_indices
		GOT_INDICES=true
	fi

	work_out_debs

	base=$(without "$base $ADDITIONAL" "$EXCLUDE")
	required=$(without "$required" "$EXCLUDE")

	if [ "$RESOLVE_DEPS" = true ]; then
		requiredX=$(echo "$required" | tr ' ' '\n' | sort | uniq)
		baseX=$(echo "$base" | tr ' ' '\n' | sort | uniq)

		info RESOLVEREQ "Resolving dependencies of required packages..."
		required=$(resolve_deps "$requiredX")
		info RESOLVEBASE "Resolving dependencies of base packages..."
		base=$(resolve_deps "$baseX")
		base=$(without "$base" "$required")

		if [ "$LOG_EXTRA_DEPS" = true ]; then
			baseN=$(without "$baseX" "$requiredX")
			baseU=$(without "$baseX" "$baseN")

			if [ "$baseU" != "" ]; then
		  		info REDUNDANTBASE "Found packages in base already in required: %s" "$baseU"
			fi

			requiredX=$(without "$required" "$requiredX")
			baseX=$(without "$base" "$baseX")
			if [ "$requiredX" != "" ]; then
				info NEWREQUIRED "Found additional required dependencies: %s" "$requiredX"
			fi
			if [ "$baseX" != "" ]; then
				info NEWBASE "Found additional base dependencies: %s" "$baseX"
			fi
		fi
	fi

	all_debs="$required $base"
fi

if am_doing_phase printdebs; then
	echo "$all_debs"
fi

if am_doing_phase dldebs; then
	if [ "$GOT_INDICES" != "true" ]; then
		download_indices
	fi
	download "$all_debs"
fi

if am_doing_phase save_variables; then
	cp "$0"				 "$TARGET/sysbootstrap/sysbootstrap"
	cp "$SYSBOOTSTRAP_DIR/functions"	 "$TARGET/sysbootstrap/functions"
	cp "$SCRIPT"			 "$TARGET/sysbootstrap/suite-script"
	# pick up common setting scripts
	cp "$SYSBOOTSTRAP_DIR"/scripts/*-common	"$TARGET/sysbootstrap/"
	echo "$ARCH"			>"$TARGET/sysbootstrap/arch"
	echo "$SUITE"			>"$TARGET/sysbootstrap/suite"
	[ "" = "$EXTRA_SUITES" ] ||
	echo "$EXTRA_SUITES"		>"$TARGET/sysbootstrap/extra-suites"
	[ "" = "$VARIANT" ] ||
	echo "$VARIANT"			>"$TARGET/sysbootstrap/variant"
	echo "$required"		>"$TARGET/sysbootstrap/required"
	echo "$base"			>"$TARGET/sysbootstrap/base"

	chmod 755 "$TARGET/sysbootstrap/sysbootstrap"
fi

if am_doing_phase maketarball; then
	(cd "$TARGET";
	 tar czf - var/lib/apt var/cache/apt sysbootstrap) >"$MAKE_TARBALL"
fi

if am_doing_phase first_stage; then
	choose_extractor

	if [ -n "$UNPACK_TARBALL" ]; then
		required=$(cat "$TARGET/sysbootstrap/required")
		base=$(cat "$TARGET/sysbootstrap/base")
		all_debs="$required $base"
	fi

	# first stage sets up the chroot -- no calls should be made to
	# "chroot $TARGET" here; but they should be possible by the time it's
	# finished
	first_stage_install

	if ! am_doing_phase second_stage; then
		cp "$0"				 "$TARGET/sysbootstrap/sysbootstrap"
		cp "$SYSBOOTSTRAP_DIR/functions"	 "$TARGET/sysbootstrap/functions"
		cp "$SCRIPT"			 "$TARGET/sysbootstrap/suite-script"
		# pick up common setting scripts
		cp "$SYSBOOTSTRAP_DIR"/scripts/*-common	"$TARGET/sysbootstrap/"
		echo "$ARCH"			>"$TARGET/sysbootstrap/arch"
		echo "$SUITE"			>"$TARGET/sysbootstrap/suite"
		[ "" = "$EXTRA_SUITES" ] ||
		echo "$EXTRA_SUITES"		>"$TARGET/sysbootstrap/extra-suites"
		echo "$USER_MIRROR"		>"$TARGET/sysbootstrap/mirror"
		[ "" = "$VARIANT" ] ||
		echo "$VARIANT"			>"$TARGET/sysbootstrap/variant"
		echo "$required"		>"$TARGET/sysbootstrap/required"
		echo "$base"			>"$TARGET/sysbootstrap/base"

		chmod 755 "$TARGET/sysbootstrap/sysbootstrap"
	fi

	setup_apt_sources "$DEF_MIRROR"
fi

if am_doing_phase second_stage; then
	if [ "$SECOND_STAGE_ONLY" = true ]; then
		required=$(cat "$SYSBOOTSTRAP_DIR/required")
		base=$(cat "$SYSBOOTSTRAP_DIR/base")
		all_debs="$required $base"
	fi

	# second stage uses the chroot to clean itself up -- has to be able to
	# work from entirely within the chroot (in case we've booted into it,
	# possibly over NFS eg)
	second_stage_install

	if [ -e "$TARGET/sysbootstrap/sysbootstrap.log" ]; then
		if [ "$KEEP_SYSBOOTSTRAP_DIR" = true ]; then
			cp "$TARGET/sysbootstrap/sysbootstrap.log" "$TARGET/var/log/bootstrap.log"
		else
			# sysbootstrap.log is still open as stdout/stderr and needs
			# to remain so, but after unlinking it some NFS servers
			# implement this by a temporary file in the same directory,
			# which makes it impossible to rmdir that directory.
			# Moving it instead works around the problem.
			mv "$TARGET/sysbootstrap/sysbootstrap.log" "$TARGET/var/log/bootstrap.log"
		fi
	fi
	sync

	if [ "$KEEP_SYSBOOTSTRAP_DIR" = true ]; then
		if [ -x "$TARGET/sysbootstrap/sysbootstrap" ]; then
			chmod 644 "$TARGET/sysbootstrap/sysbootstrap"
		fi
	else
		rm -rf "$TARGET/sysbootstrap"
	fi
fi

if am_doing_phase kill_target; then
	if [ "$KEEP_SYSBOOTSTRAP_DIR" != true ]; then
                info KILLTARGET "Deleting target directory"
		rm -rf --one-file-system "$TARGET"
	fi
fi
